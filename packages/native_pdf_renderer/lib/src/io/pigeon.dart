// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class OpenDataMessage {
  Uint8List? data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static OpenDataMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return OpenDataMessage()..data = pigeonMap['data'] as Uint8List?;
  }
}

class OpenPathMessage {
  String? path;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['path'] = path;
    return pigeonMap;
  }

  static OpenPathMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return OpenPathMessage()..path = pigeonMap['path'] as String?;
  }
}

class OpenReply {
  String? id;
  int? pagesCount;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['pagesCount'] = pagesCount;
    return pigeonMap;
  }

  static OpenReply decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return OpenReply()
      ..id = pigeonMap['id'] as String?
      ..pagesCount = pigeonMap['pagesCount'] as int?;
  }
}

class IdMessage {
  String? id;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    return pigeonMap;
  }

  static IdMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return IdMessage()..id = pigeonMap['id'] as String?;
  }
}

class GetPageMessage {
  String? documentId;
  int? pageNumber;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['documentId'] = documentId;
    pigeonMap['pageNumber'] = pageNumber;
    return pigeonMap;
  }

  static GetPageMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GetPageMessage()
      ..documentId = pigeonMap['documentId'] as String?
      ..pageNumber = pigeonMap['pageNumber'] as int?;
  }
}

class GetPageReply {
  String? id;
  int? width;
  int? height;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['width'] = width;
    pigeonMap['height'] = height;
    return pigeonMap;
  }

  static GetPageReply decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GetPageReply()
      ..id = pigeonMap['id'] as String?
      ..width = pigeonMap['width'] as int?
      ..height = pigeonMap['height'] as int?;
  }
}

class RenderPageMessage {
  String? pageId;
  int? width;
  int? height;
  int? format;
  String? backgroundColor;
  bool? crop;
  int? cropX;
  int? cropY;
  int? cropHeight;
  int? cropWidth;
  int? quality;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['pageId'] = pageId;
    pigeonMap['width'] = width;
    pigeonMap['height'] = height;
    pigeonMap['format'] = format;
    pigeonMap['backgroundColor'] = backgroundColor;
    pigeonMap['crop'] = crop;
    pigeonMap['cropX'] = cropX;
    pigeonMap['cropY'] = cropY;
    pigeonMap['cropHeight'] = cropHeight;
    pigeonMap['cropWidth'] = cropWidth;
    pigeonMap['quality'] = quality;
    return pigeonMap;
  }

  static RenderPageMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RenderPageMessage()
      ..pageId = pigeonMap['pageId'] as String?
      ..width = pigeonMap['width'] as int?
      ..height = pigeonMap['height'] as int?
      ..format = pigeonMap['format'] as int?
      ..backgroundColor = pigeonMap['backgroundColor'] as String?
      ..crop = pigeonMap['crop'] as bool?
      ..cropX = pigeonMap['cropX'] as int?
      ..cropY = pigeonMap['cropY'] as int?
      ..cropHeight = pigeonMap['cropHeight'] as int?
      ..cropWidth = pigeonMap['cropWidth'] as int?
      ..quality = pigeonMap['quality'] as int?;
  }
}

class RenderPageReply {
  int? width;
  int? height;
  String? path;
  Uint8List? data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['width'] = width;
    pigeonMap['height'] = height;
    pigeonMap['path'] = path;
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static RenderPageReply decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RenderPageReply()
      ..width = pigeonMap['width'] as int?
      ..height = pigeonMap['height'] as int?
      ..path = pigeonMap['path'] as String?
      ..data = pigeonMap['data'] as Uint8List?;
  }
}

class _PdfRendererApiCodec extends StandardMessageCodec {
  const _PdfRendererApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is GetPageMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is GetPageReply) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is IdMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is OpenDataMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is OpenPathMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is OpenReply) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is RenderPageMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is RenderPageReply) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return GetPageMessage.decode(readValue(buffer)!);

      case 129:
        return GetPageReply.decode(readValue(buffer)!);

      case 130:
        return IdMessage.decode(readValue(buffer)!);

      case 131:
        return OpenDataMessage.decode(readValue(buffer)!);

      case 132:
        return OpenPathMessage.decode(readValue(buffer)!);

      case 133:
        return OpenReply.decode(readValue(buffer)!);

      case 134:
        return RenderPageMessage.decode(readValue(buffer)!);

      case 135:
        return RenderPageReply.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PdfRendererApi {
  /// Constructor for [PdfRendererApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PdfRendererApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PdfRendererApiCodec();

  Future<OpenReply> openDocumentData(OpenDataMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PdfRendererApi.openDocumentData', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as OpenReply?)!;
    }
  }

  Future<OpenReply> openDocumentFile(OpenPathMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PdfRendererApi.openDocumentFile', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as OpenReply?)!;
    }
  }

  Future<OpenReply> openDocumentAsset(OpenPathMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PdfRendererApi.openDocumentAsset', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as OpenReply?)!;
    }
  }

  Future<void> closeDocument(IdMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PdfRendererApi.closeDocument', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<GetPageReply> getPage(GetPageMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PdfRendererApi.getPage', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as GetPageReply?)!;
    }
  }

  Future<RenderPageReply> renderPage(RenderPageMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PdfRendererApi.renderPage', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as RenderPageReply?)!;
    }
  }

  Future<void> closePage(IdMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PdfRendererApi.closePage', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
